labs(x = "Lead Time (days)",
title = "Figure 4: Lead Time Boxplot")
hotels %>%
filter(lead_time <= 625) -> hotels
hotels %>%
ggplot(aes(days_in_waiting_list)) +
geom_boxplot() +
labs(x = "Days in Waiting List (days)",
title = "Figure 5: Days in Waiting List Boxplot")
hotels %>%
filter(days_in_waiting_list <= 200) -> hotels
hotels %>%
mutate(reservation_status = as.factor(reservation_status)) -> hotels
hotels %>%
mutate(is_repeated_guest = as.logical(is_repeated_guest)) -> hotels
hotels %>%
ggplot(aes(previous_cancellations)) +
geom_boxplot() +
labs(x = "Previous Cancellations",
title = "Figure 6: Previous Cancellations Boxplot")
hotels %>%
ggplot(aes(previous_bookings_not_canceled)) +
geom_boxplot() +
labs(x = "Previous Bookings not Cancelled",
title = "Figure 7: Previous Bookings not Cancelled Histogram")
hotels %>%
ggplot(aes(stays_in_weekend_nights)) +
geom_boxplot() +
labs(x = "Stays in Weekend Nights",
title = "Figure 8: Stays in Weekend Nights Boxplot")
hotels %>%
ggplot(aes(stays_in_week_nights)) +
geom_boxplot() +
labs(x = "Stays in Week Nights",
title = "Figure 9: Stays in Week Nights Boxplot")
hotels %>%
mutate(reserved_room_type = as.factor(reserved_room_type)) -> hotels
hotels %>%
mutate(meal = case_when(meal == "Undefined" ~ "No Meal Plan",
meal == "SC" ~ "No Meal Plan",
meal == "BB" ~ "Bed and Breakfast",
meal == "HB" ~ "Half Board",
meal == "FB" ~ "Full Board")
) %>%
mutate(meal = as.factor(meal)) -> hotels
#chuyển về dạng factor
hotels %>%
mutate(hotel = as.factor(hotel)) -> hotels
hotels %>%
filter(market_segment != "Undefined") %>%
mutate(market_segment = as.factor(market_segment)) -> hotels
hotels %>%
filter(distribution_channel != "Undefined") %>%
mutate(distribution_channel = as.factor(distribution_channel)) -> hotels
hotels %>%
mutate(deposit_type = as.factor(deposit_type)) -> hotels
hotels %>%
mutate(agent = na_if(agent, "NULL")) %>%
mutate(agent = as.numeric(agent)) -> hotels
hotels %>%
mutate(company = na_if(company, "NULL")) %>%
mutate(company = as.numeric(company)) -> hotels
hotels %>%
mutate(customer_type = as.factor(customer_type)) -> hotels
hotels %>%
select(adr) %>%
summary
hotels %>%
filter(adr >= 0) -> hotels
glimpse(hotels)
#Dếm số đặt phòng mỗi tháng
hotels %>%
count(month(arrival_date, label = TRUE, abbr = FALSE)) %>%
kable(format = "pipe",
col.names = c("Arrival Month", "Total Number of Bookings"),
caption = "Table 4: Total Number of Bookings by Month")
hotels %>%
select(adults, children, babies) %>%
summarise(across(.fns = summary)) -> guest_age_summary
tibble(c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max."),
guest_age_summary) -> guest_age_summary
guest_age_summary %>%
kable(format = "pipe",
col.names = c("", "Adults", "Children", "Babies"),
caption = "Table 5: Guest Age Demographics")
# 10 quốc gia có số lượng đặt phòng lớn nhất
hotels %>%
count(country) %>%
left_join(y = ISO_3166_1, by = c("country" = "Alpha_3")) %>%
select(country, Name, n) %>%
slice_max(order_by = n, n = 10) %>%
kable(format = "pipe",
col.names = c("Abbr.",
"Country",
"Number of Bookings"),
row.names = TRUE,
caption = "Table 6: Top Ten Countries by Number of Bookings")
#Lập bảng danh mục trạng thái đặt chỗ khác nhau
hotels %>%
count(reservation_status) %>%
kable(format = "pipe",
col.names = c("Reservation Status", "Number of Bookings"),
caption = "Table 7: Number of Bookings by Reservation Status"
)
#Đếm số lần cập nhật trạng thái cuối cùng theo tháng
hotels %>%
count(month(reservation_status_date, label = TRUE, abbr = FALSE)) %>%
kable(format = "pipe",
col.names = c("Month", "Number of Bookings"),
caption = "Table 8: Number of Booking Final Updates by Month")
hotels %>%
select(lead_time, days_in_waiting_list) %>%
summarise(across(.fn = summary)) %>%
mutate(stat_labels = c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.",
"Max.")
) %>%
select(stat_labels, lead_time, days_in_waiting_list) %>%
kable(format = "pipe",
col.names = c("", "Lead Time", "Days in Waiting List"),
caption = "Table 9: Lead Time and Days in Waiting List Summaries")
#Tạo một bảng tóm tắt cho previous_cancellations và previous_bookings_not_cancelled
hotels %>%
select(previous_cancellations, previous_bookings_not_canceled) %>%
summarise(across(.fn = summary)) %>%
# Đặt tên cho các cột
mutate(stat_labels = c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.",
"Max.")
) %>%
select(stat_labels,
previous_cancellations,
previous_bookings_not_canceled) %>%
kable(format = "pipe",
col.names = c("",
"Đặt phòng trước bị hủy",
"Đặt phòng trước không bị hủy"),
caption = "Table 10: Bảng tóm tắt đặt phòng trước bị hủy và không bị hủy")
hotels %>%
select(stays_in_weekend_nights,
stays_in_week_nights,
required_car_parking_spaces,
total_of_special_requests) %>%
summarise(across(.fn = summary)) %>%
mutate(stat_labels = c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.",
"Max.")
) %>%
select(stat_labels,
stays_in_weekend_nights,
stays_in_week_nights,
required_car_parking_spaces,
total_of_special_requests) %>%
kable(format = "pipe",
col.names = c("",
"Stays in Weekend Nights",
"Stays in Week Nights",
"Required Parking Spaces",
"Total Special Requests")
)
hotels %>%
# Đếm số lượng loại phòng đã được đặt trước
count(reserved_room_type) %>%
full_join(y = count(hotels, assigned_room_type),
by = c("reserved_room_type" = "assigned_room_type")) %>%
kable(format = "pipe",
col.names = c("Loại phòng", "Đã được đặt trước", "Đã được chỉ định"),
caption = "Table 11: Bảng so sánh loại phòng đặt trước và được chỉ định")
hotels %>%
count(hotel) %>%
kable(format = "pipe",
col.names = c("Hotel", "Number of Bookings"),
caption = "Table 12: Số lượng đặt phòng theo loại khách sạn")
hotels %>%
count(market_segment) %>%
# Sắp xếp kết quả giảm dần
arrange(desc(n)) %>%
mutate(percent_of_bookings = round(100 * n / sum(n),
2)
) %>%
kable(format = "pipe",
col.name = c("Market Segment",
"Number of Bookings",
"Percent of Bookings"),
caption = "Table 13: Tỷ lệ đặt phòng theo phân khúc thị trường")
hotels %>%
count(distribution_channel) %>%
arrange(desc(n)) %>%
mutate(percent_of_bookings = round(100 * n / sum(n),
2)
) %>%
kable(format = "pipe",
col.name = c("Distribution Channel",
"Number of Bookings",
"Percent of Bookings"),
caption = "Table 14: Tỷ lệ đặt phòng theo kênh phân phối")
hotels %>%
select(booking_changes) %>%
summarise(summary(booking_changes)) -> changes_summary
tibble(c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max."),
changes_summary) %>%
kable(format = "pipe",
col.names = c("", ""),
caption = "Table 15: Thống kê tóm tắt Thay đổi đặt phòng")
hotels %>%
count(deposit_type) %>%
arrange(desc(n)) %>%
mutate(percent_of_bookings = round(100 * n / sum(n),
2)
) %>%
kable(format = "pipe",
col.name = c("Deposit Type",
"Number of Bookings",
"Percent of Bookings"),
caption = "Table 16: Tỷ lệ đặt phòng theo hình thức đặt cọc")
hotels %>%
count(customer_type) %>%
arrange(desc(n)) %>%
mutate(percent_of_bookings = round(100 * n / sum(n),
2)
) %>%
kable(format = "pipe",
col.name = c("Customer Type",
"Number of Bookings",
"Percent of Bookings"),
caption = "Table 17: Tỷ lệ đặt phòng theo loại khách hàng")
hotels %>%
summarise(summary(adr)) -> adr_summary
# Add row names to the summary and output as a table
tibble(c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max."),
adr_summary) %>%
kable(format = "pipe",
col.names = c("", ""),
caption = "Table 18: Thống kê tóm tắt tỉ lệ trung bình hằng ngày (\u20ac)")
# Load the world map data
world_map = map_data(map = "world")
# We need to add country names that match the regions in the world_map
# map_data. Since this will need be done every time a world_map is made, it
# will save a lot of space to just add a country name variable to the hotels
# data.
hotels %>%
# Add the full names for each country
left_join(y = ISO_3166_1, by = c("country" = "Alpha_3")) %>%
# Correct the Names to match regions in world_map
mutate(Name = case_when(Name == "French Southern Territories" ~ "French Southern and Antarctic Lands",
Name == "Bolivia, Plurinational State of" ~ "Bolivia",
Name == "Côte d'Ivoire" ~ "Ivory Coast",
Name == "CN" ~ "China",
Name == "Cabo Verde" ~ "Cape Verde",
Name == "Czechia" ~ "Czech Republic",
Name == "United Kingdom" ~ "UK",
# There was no entry for Gibraltar in the map
Name == "Gibraltar" ~ "Spain",
# Hong Kong didn't have its own entry, added to China
Name == "Hong Kong" ~ "China",
Name == "Iran, Islamic Republic of" ~ "Iran",
Name == "Saint Kitts and Nevis" ~ "Saint Kitts",
Name == "Korea, Republic of" ~ "South Korea",
Name == "Lao People's Democratic Republic" ~ "Laos",
# Macao didn't have its own entry, added to China
Name == "Macao" ~ "China",
Name == "Russian Federation" ~ "Russia",
Name == "Syrian Arab Republic" ~ "Syria",
Name == "Taiwan, Province of China" ~ "Taiwan",
country == "TMP" ~ "Timor-Leste",
Name == "Tanzania, United Republic of" ~ "Tanzania",
Name == "United States Minor Outlying Islands" ~ "USA",
Name == "United States" ~ "USA",
Name == "Venezuela, Bolivarian Republic of" ~ "Venezuela",
Name == "Virgin Islands, British" ~ "Virgin Islands",
Name == "Viet Nam" ~ "Vietnam",
country == "CN" ~ "China",
TRUE ~ Name)
) %>%
rename(country_name = Name, country_abbr = country) %>%
# Drop the superfluous variables inherited from ISO_3166_1
select(-Alpha_2, -Numeric, -Official_name, -Common_name) -> hotels
# Make a plot of bookings vs country
hotels %>%
# Count the bookings by country
count(country_name) %>%
# Make the world map
ggplot() +
# Add a base layer to show all countries, even ones we don't have data for
geom_map(data = world_map,
map = world_map,
aes(map_id = region),
fill = "white",
color = "black"
) +
# Color the map based on the number of bookings per country
geom_map(aes(map_id = country_name, fill = n), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat) +
scale_fill_continuous(name = "", type = "viridis") +
labs(title = "Figure 10: World Map of Bookings",
x = "Longitude (°)",
y = "Lattitude (°)")
hotels %>%
mutate(arrival_year = year(arrival_date)) %>%
group_by(arrival_year) %>%
ggplot() +
geom_bar(aes(x = hotel, fill = hotel)) +
scale_fill_viridis_d()+
facet_wrap(~ arrival_year, nrow = 1) +
labs(x = "",
y = "Number of Bookings",
fill = "Hotel",
title = "Figure 11: Tỷ lệ đặt phòng theo năm")
hotels %>%
mutate(arrival_month = month(arrival_date, label = TRUE, abbr = TRUE)) %>%
ggplot() +
geom_bar(aes(x = arrival_month, fill = hotel),
position = "dodge") +
scale_fill_viridis_d()+
facet_wrap(~ year(arrival_date), nrow = 3) +
labs(x = "",
y = "Number of Bookings",
fill = "Hotel",
title = "Figure 12: Tỷ lệ đặt phòng theo tháng")
hotels %>%
ggplot(aes(distribution_channel, fill = (hotel))) +
geom_bar(position = 'dodge') +
scale_y_continuous(name = "Number of Bookings",labels = scales::comma) +
scale_fill_viridis_d()+
xlab("Distribution Channel") +
ggtitle("Figure 13: Tỷ lệ đặt phòng theo kênh phân phối") +
labs(fill = 'Hotel')
hotels %>%
ggplot() +
geom_bar(aes(x = is_canceled, fill = hotel),
position = "dodge") +
scale_fill_viridis_d()+
labs(x = "Cancelled",
y = "Number of Bookings",
fill = "Hotel",
title = "Figure 14: Tổng số lần hủy đặt phòng theo loại khách sạn")
hotels %>%
mutate(arrival_year = year(arrival_date)) %>%
ggplot() +
geom_bar(aes(x = is_canceled, fill = hotel),
position = "dodge") +
facet_wrap(~ arrival_year, nrow = 1) +
scale_fill_viridis_d()+
labs(x = "Cancelled",
y = "Number of Bookings",
fill = "Hotel",
title = "Figure 15: Sự hủy đặt phòng theo loại khách sạn và theo năm")
hotels %>%
mutate(arrival_year = year(arrival_date)) %>%
group_by(hotel, arrival_year) %>%
count(is_canceled) %>%
group_by(hotel, arrival_year) %>%
summarise(is_canceled = is_canceled,
percentages = round(100 * n / sum(n), 2)
) %>%
pivot_wider(names_from = arrival_year, values_from = percentages) %>%
kable(format = "pipe",
col.names = c("Hotel",
"Cancellation Status",
"2015 (%)",
"2016 (%)",
"2017 (%)"),
caption = "Table 19: Tỷ lệ đặt phòng bị hủy và không bị hủy theo năm")
hotels %>%
filter(is_canceled == TRUE) %>%
group_by(reservation_status) %>%
count(is_canceled) %>%
ungroup() %>%
mutate(percentage = round(100 * n / sum(n), 2)) %>%
select(-is_canceled) %>%
kable(format = "pipe",
col.names = c("Reservation Status",
"Number of Bookings",
"Percentage of Cancellations"),
caption = "Table 20: Hình thức hủy đặt phòng")
hotels %>%
filter(is_canceled == TRUE) %>%
mutate(arrival_year = year(arrival_date)) %>%
ggplot(aes(x = reservation_status, fill = hotel)) +
geom_bar(position = "dodge") +
scale_fill_viridis_d()+
facet_grid(cols = vars(arrival_year)) +
labs(x = "Hình thức hủy bỏ",
y = "Số lượng đặt phòng",
fill = "Hotel",
title = "Figure 16: Hình thức hủy đặt phòng xét theo loại khách sạn và theo năm")
hotels %>%
filter(is_canceled == TRUE) %>%
group_by(hotel, reservation_status) %>%
count(is_canceled) %>%
ungroup() %>%
mutate(percentage = round(100 * n / sum(n), 2)) %>%
select(-is_canceled) %>%
kable(format = "pipe",
col.names = c("Hotel",
"Reservation Status",
"Number of Bookings",
"Percentage of Cancellations"),
caption = "Table 21: Hình thức hủy đặt phòng theo loại khách sạn")
hotels %>%
group_by(hotel, distribution_channel) %>%
summarise(total_cancellations = sum(is_canceled, na.rm = TRUE)) %>%
pivot_wider(names_from = distribution_channel,
values_from = total_cancellations) %>%
kable(format = "pipe",
caption = "Table 22: Hủy đặt phòng theo kênh phân phối và loại khách sạn")
hotels %>%
group_by(hotel, distribution_channel) %>%
summarise(total_cancellations = sum(is_canceled, na.rm = TRUE)) %>%
pivot_wider(names_from = distribution_channel,
values_from = total_cancellations) %>%
kable(format = "pipe",
caption = "Table 22: Hủy đặt phòng theo kênh phân phối và loại khách sạn")
hotels %>%
filter(is_canceled == TRUE) %>%
group_by(hotel, distribution_channel) %>%
count(is_canceled) %>%
# Tính phần trăm lượt hủy theo kênh phân phối
group_by(hotel) %>%
mutate(percentage = round(100 * n / sum(n), 2)) %>%
# Xóa bỏ biến không cần thiết
select(-c(is_canceled, n)) %>%
pivot_wider(names_from = distribution_channel, values_from = percentage) %>%
kable(format = "pipe",
caption = "Table 23: Tỷ lệ phần trăm sự hủy bỏ theo kênh phân phối")
hotels %>%
filter(is_canceled == TRUE) %>%
group_by(hotel, distribution_channel) %>%
count(is_canceled) %>%
# Tính phần trăm lượt hủy theo kênh phân phối
group_by(hotel) %>%
mutate(percentage = round(100 * n / sum(n), 2)) %>%
# Xóa bỏ biến không cần thiết
select(-c(is_canceled, n)) %>%
pivot_wider(names_from = distribution_channel, values_from = percentage) %>%
kable(format = "pipe",
caption = "Table 23: Tỷ lệ phần trăm sự hủy bỏ theo kênh phân phối (%)")
hotels %>%
filter(is_canceled == TRUE) %>%
group_by(distribution_channel) %>%
count(is_canceled) %>%
ungroup() %>%
mutate(percentage = round(100 * n / sum(n), 2)) %>%
select(-is_canceled) %>%
kable(format = "pipe",
col.names = c("Kênh phân phối",
"Lượt hủy bỏ",
"Phần trăm lượt hủy bỏ"),
caption = "Table 24: Tỷ lệ phần trăm hủy bỏ theo kênh phân phối")
hotels %>%
group_by(hotel, distribution_channel) %>%
summarise(n_canceled = sum(is_canceled),
n_total = n(), percentage = 100 * n_canceled / n_total) %>%
ggplot() +
geom_col(aes(x = distribution_channel,
y = percentage,
fill = hotel),
position = "dodge") +
labs(x = "Kênh phân phối",
y = "Phần trăm lượt đặt phòng bị hủy",
title = "Figure 18: Tỷ lệ đặt phòng bị hủy với từng kênh phân phối theo loại khách sạn",
fill = "Hotel")
hotels %>%
group_by(hotel, distribution_channel) %>%
summarise(n_canceled = sum(is_canceled),
n_total = n(), percentage = 100 * n_canceled / n_total) %>%
ggplot() +
geom_col(aes(x = distribution_channel,
y = percentage,
fill = hotel),
position = "dodge") +
scale_fill_viridis_d()+
labs(x = "Kênh phân phối",
y = "Phần trăm lượt đặt phòng bị hủy",
title = "Figure 18: Tỷ lệ đặt phòng bị hủy với từng kênh phân phối theo loại khách sạn",
fill = "Hotel")
hotels %>%
group_by(country_name) %>%
summarise(n_cancelled = sum(is_canceled),
n_total = n(),
percentage_cancellations = round(100 * n_cancelled / n_total,
2)
) %>%
slice_max(n_cancelled, n = 10) %>%
select(country_name,
n_cancelled,
n_total,
percentage_cancellations) %>%
kable(format = "pipe",
col.names = c("Tên quốc gia",
"Đặt phòng bị hủy",
"Tổng lượt đặt phòng",
"Tỷ lệ phần trăm hủy bỏ"),
caption = "Table 25: Hủy bỏ đặt phòng theo quốc gia")
hotels %>%
group_by(country_name) %>%
summarise(n_cancelled = sum(is_canceled),
n_total = n(),
percentage_cancellations = 100 * n_cancelled / n_total) %>%
ggplot() +
geom_map(data = world_map,
map = world_map,
aes(map_id = region),
fill = "white",
color = "black"
) +
geom_map(aes(map_id = country_name,
fill = percentage_cancellations),
map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat) +
scale_fill_continuous(name = "", type = "viridis") +
labs(title = "Figure 18: Percentage of Bookings Cancelled World Map",
x = "Longitude (°)",
y = "Lattitude (°)"
)
